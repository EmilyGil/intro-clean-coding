###Exercises
Please submit your answers to the following questions in a file called intro_to_clean_coding_answers.txt.

>In your own words, explain what clean code is and why it is important.

A: Maintainable and readable code. Having clean, high-quality code is important when working with others and with large-scale, complex applications in general.

>Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: NASA spaceshuttles require code that is failure-resistant. If space shuttles had any acceleration, launching, or code of any kind that had bugs in it could lead to deaths or serious malfunctions could occur to the space shuttles.

>Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: No it is not. The code has too many comments. Clean code should be readable enough on its own without the comments.

```
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
  SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
  PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
  SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
  PRINT z                       // Print result
 END IF
END FUNCTION
```
>Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: No it is not. I refactored it with proper indentation.

```
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

   PRINT percentage
 END FUNCTION
```
>Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
     CALL getPayment RETURNING amount
     PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
     CALL getPayment RETURNING amount
     PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
  END FUNCTION
```
b. The following function checks out a book if there are no issues with the guest's account.

```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
   PRINT "Your books have been issued."
 ELSE 
   SET book.status to "Checked Out"
 
 IF NOT(guest.hasOverdueBooks) THEN
   PRINT "Unable to check out book."
 IF guest.outstandingFees = 0 THEN
   PRINT "Unable to check out book."
 END IF
END FUNCTION
```
c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

```
CLASS BankAccount
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION
END CLASS

CLASS Deposit
 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION
END CLASS

CLASS Withdrawal
 FUNCTION withdraw(amount)
    IF balance > amount THEN
       SET balance to balance - amount
 END FUNCTION
END CLASS

CLASS CreditCard
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
 END FUNCTION
END CLASS
 
CLASS Status
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
 END FUNCTION
END CLASS
```
###Programming Questions

You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

>6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

```
var number = [10,1,1,1,2,6,4];
function(array)
 else if (number % Math.sqrt(number) === 0) {
  console.log("Perfect square!");
}
else {
  console.log("not perfect square");
}
```
>7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

```
class FindDuplicate 
{ 
    void printRepeating(int arr[], int size) 
    { 
        int i;   
        System.out.println("True"); 
     
        for (i = 0; i < size; i++) 
        { 
            if (arr[Math.abs(arr[i])] >= 0) 
                arr[Math.abs(arr[i])] = -arr[Math.abs(arr[i])]; 
            else
                System.out.print(Math.abs(arr[i]) + "false"); 
        }          
    }  
  
   public static void main(String[] args)  
    { 
        FindDuplicate duplicate = new FindDuplicate(); 
        int arr[] = {1, 2, 3, 1, 6, 6}; 
        int arr_size = arr.length; 
  
        duplicate.printRepeating(arr, arr_size); 
    } 
} 
```
